# Chapter 3: Set theory

# This file formalizes set theory axioms in chapter 3 of Analysis I, with explanations and examples.

# Axiom 3.1 If A is a set, then A is an object. In particular, given two sets A and B, it is meaningful to ask whether A in B.
# "in" and "set" are built-in keywords. They behave in Litex just like how they behave in daily math (naive set theory).
# "obj" is a built-in keyword in Litex for declaring objects. Also, anything declared object (things that are not declared as prop or exist_prop) is an object (writes xxx $in obj). obj itself is not obj.
# The word "object" every now and then in Analysis I without any definition. It sort to reveals that explanations of basic elements in math are still missing in this book (or maybe in math world in general). The keyword "obj" in Litex is really something aligns with the word "object" means in math with Litex creators's understanding.

forall s set:
    s $in obj

# Definition 3.1.4: Set A is equal to set B, written A = B, if and only if every element of A is an element of B and every element of B is an element of A.
know forall A , B set:
    A = B
    iff:
        forall x A:
            x $in B
        forall x B:
            x $in A

# Axiom 3.2: There exists a set which contains no elements
know exist_prop empty_set set st exist_empty_set():
    forall x obj:
        not $in(x, empty_set)

# Axiom 3.3: a is an object, then there exists a set A such that A contains and only contains a. If a and b are objects, then there exists a set A such that A contains and only contains a and b.
know exist_prop s set st exist_set_contains_and_only_contains_obj(a obj):
    forall x s:
        x = a
    a $in s

# Axiom 3.4: Definition of union of two sets.
fn union(A, B set) set:
    forall x A:
        x $in union(A, B)
    forall x B:
        x $in union(A, B)
    forall x union(A, B):
        or:
            x $in A
            x $in B

# Definition of subset.
prop is_subset_of(A, B set):
    forall x A:
        x $in B

# Axiom 3.5: Axiom of specification. If A is a set and P is a property, then there exists a set B such that B contains and only contains the elements of A that satisfy P.
# In Litex you can specify a set very flexibly.
prove:
    obj s2 set # define a random set
    prop property_of_s2_items(x s2) # define a property of the elements of s2
    
    # TODO: Litex will provide the user a syntax sugar for defining a set by a property. Now we use the idea of "if and only if" to define a set by a property.
    obj s set: # define s = {x in s2| property_of_s2_items(x) is true}
        s $is_subset_of s2
        forall x s:
            $property_of_s2_items(x)
        forall x s2:
            $property_of_s2_items(x)
            then:
                x $in s
    
# TODO: Axiom 3.6 solves the problem of exist and only exist. But it is second-order logic. Since early versions of Litex does not support second-order logic for user, Litex will make it as built-in.
# Axiom 3.6: 

# Axiom 3.7: There exists a set N whose elements have properties defined in chapter 2.
# N is built-in in Litex. Most of the properties of N are also built-in. The user can also define his own properties of N easily.

# Axiom 3.8 is wrong because it leads to Russell's paradox.

# Axiom 3.9 (Regularity) If A is a non-empty set, then there is at least one element of A that is either not a set, or is disjoint from A
prop is_disjoint_from(A obj, B set):
    A $in set
    forall x A:
        not $in(x, B)

exist_prop x A st any_non_empty_set_has_item_that_is_not_a_set_or_is_disjoint_from_A(A set):
    or:
        not $in(x, set) # "x is a set" is written as $in(x, set)
        $is_disjoint_from(x, A)

# Axiom 3.10 (Power set axiom) Let X and Y be sets. Then there exists a set denoted by Y^{X} which contains all functions from X to Y
# keyword "fn_template" is a built-in keyword in Litex for declaring a function template, i.e. a set of functions that satisfy some conditions about its domain and range. This keyword is more powerful and expressive than power set axiom.

# For example, we can declare the set of all functions from natural numbers larger than 10 to real numbers less than 100 as follows:
fn_template fn_from_N_to_N(x N) R:
    dom:
        x > 10
    then:
        fn_from_N_to_N(x) < 100

# Axiom 3.11 (Union axiom) Let X be a set. Then there exists a set denoted by union(X) which contains all elements of the elements of X.
fn union_of_set_in_sets(X set) set:
    forall x X:
        x $in set
    then:
        x $in union_of_set_in_sets(X)

